// shutdown interrupt 


alias userSP R5;
userSP = SP;

alias pid R11;
pid = [SYSTEM_STATUS_TABLE + CORE * 5 + 1];


[PROCESS_TABLE + ( pid * 16) + 13] = SP;
SP = [PROCESS_TABLE + pid * 16 + 11] * 512 - 1;

alias RETURN R2;
RETURN = [PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512;

[PROCESS_TABLE + pid * 16 + 9 ] = 21;


// check if the invoking process is shell pid == 2
if (pid != 2) then
    [PROCESS_TABLE + pid * 16 + 9 ] = 0;
    [RETURN] = -1;
    SP = userSP;
    ireturn;
endif;

backup;
R1 = 1;

call MOD_8;
restore;

reset;

multipush(R1,R2,R3,R4);
R1 = 5;
R2 = pid;

call MOD_1;

multipop(R1,R2,R3,R4);

R5 = 0;

while (R5 < 4) do
    if ([BUFFER_TABLE + R5 * 4 + 1] == 1) then
        multipush(R5);
        R1 = 1;
        R2 = pid;
        R3 = 71 + R5;
        R4 = [BUFFER_TABLE + R5 * 4];
        call MOD_4;
        multipop(R5);
    endif;
    R5 = R5 + 1;
endwhile;


// INODE TABLE
R1 = 1;
R2 = pid;
R3 = 59;
R4 = 3;
call MOD_4;

R1 = 1;
R2 = pid;
R3 = 60;
R4 = 4;
call MOD_4;

// ROOT FILE
R1 = 1;
R2 = pid;
R3 = 62;
R4 = 5;
call MOD_4;

// DISK FREE LIST
R1 = 1;
R2 = pid;
R3 = 61;
R4 = 2;
call MOD_4;

backup;
R1 = 4;
R2 = KERN_LOCK;

call MOD_8;
restore;


halt;